Проект многопользовательская змейка на python.
===============================================
ТЗ:

1) клиент-серверная архитектура
2) tKinter
3) больше 2 игроков на поле
4) ...
==================================================
Правила:

1) голова змейки выделена другим цветом
2) яблоки спавнятся в рандомных местах
3) при столкновении с препятсвием или другим игроком змейка умирает
3*) должна ли умирать змейка в которую врезались не в голову?
4) при съедании яблока змейка удлинняется
5) очки можно сделать пропорционально
6) при запуске игра предлагает выбрать сервер или игрок
7) при создании сервера он создает слушателя и ждёт когда все игроки будут готовы
8) при подключении клиента надо ввести адрес хоста
9) побеждает последний оставшийся игрок
10) если игроков несколько или вышло время то побеждает тот кто набрал больше очков
11) очки можно сделать динамическими от длинны змейки
12) яблоки можно ограничить по времени существования, новое создавать после разрушения предыдущего
13)...
=============================================================

Что потребуется:

0) Отличный повод начать изучать гит

1) соединение
    учим сервер-клиент
    надо понять что и как говорить клиенту
    чо там с многопоточностью? (например отправка данных и получение, или на сервере разграничить вычисления коллизий)
    https://habr.com/ru/post/149077/

2) графика
    тКинтер как нарисовать
    старт игры по кнопке ожидания + цветовая-никовая идентификация игроков
    очки в таблице по игрокам
    https://habr.com/ru/post/133337/

3) Логика
    не забыть заблочить клавиатуру проигравшему
    обратный отчет от 100, по окончанию - игра стоп, выбираем победителя
    думаем...

идея1:
- перед началом игры ждём пока все игроки нажмут "готов"
- игрок отдает на сервер свое действие
- сервер обсчитывает к чему это действие приведет в купе со всеми игроками
- сервер принимает решение кому что отвечать
- сервер говорит клиенту 0. статус игры (ожидание, игра, стоп) 1. какие клетки очистить 2. какие клетки закрасить + объект (голова,тело,яблоко)

// при таком подходе можно держать в памяти матрицу с 0-3 цифрами и обновлять только актуальные строки и столбцы
// мне кажется замечательно подойдет json хоть где-то его применить
// каждой змейке можно хранить вектор движения простой список например константы top,down,left,right = [dx,dy] удобно при дефолте двигать на x,y +=v[0],v[1]

- если игра стоп(умер, время) считаем есть ли победитеть и его показываем всем, или блочим клавиатуру и отсекаем все действия после смерти НО показываем игру до конца
- если игрок перемещается без съедания яблока - закрашиваем конец, пририсовываем голову, перекрашиваем бывшую голову
- если игрок съедает яблоко перекрашиваем бывшую голову, яблоко добавляем в качестве новой головы
- если игрок врезается в другого игрока - стираем игрока, обрезаем пострадавшему хвост если попадание было голова в голову - стираем обоих
- если игрок врезается в препятсвие - стираем игрока, стоп игра
- если заканчивается время - стоп игра, показываем победителя
- счетчик по игрокам динамический, с подсветкой "себя"
- возможно ли "свои действия", если конечно они безопасны, рисовать сразу на клиенте при этом сообщая
- можно при старте сервера скинуть его адрес с портом сразу в буфер обмена

==========================================================================================

линки:
https://younglinux.info/tkinter/text.php
http://qaru.site/questions/42995/how-do-i-copy-a-string-to-the-clipboard-on-windows-using-python
https://younglinux.info/tkinter/canvas.php
https://younglinux.info/tkinter/canvasmeth.php
https://refactoring.guru/ru/design-patterns/proxy
https://ru.coursera.org/lecture/diving-in-python/sokiety-kliient-siervier-3YYVH
https://github.com/Ganapati/Simple-Game-Server
https://github.com/engineer-man/youtube/blob/master/015/snake.py
https://habr.com/ru/post/133337/
https://habr.com/ru/post/149077/


=======================================================================================

План реализации:

I) Сервер

II) Клиент

III) UI
